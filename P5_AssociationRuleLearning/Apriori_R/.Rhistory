setwd("~/MachineLearning/P3_Classification/Random_Forest_Classification")
install.packages("randomForest")
library(randomForest)
# Random Forest Classification
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[-3], y = training_set[3], ntree = 10)
yes
View(test_set)
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
classifier = randomForest(x = training_set[-3], y = training_set[3], ntree = 10)
# install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[-3], y = training_set$Purchased, ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
classifier = randomForest(x = training_set[-3], y = training_set$Purchased, ntree = 500)
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
classifier = randomForest(x = training_set[-3], y = training_set$Purchased, ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3], y = training_set$Purchased, ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Random Forest Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'yellow', 'blue'))
resetClass()
clear
rm(list = ls())
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# install.packages("randomForest")
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3], y = training_set$Purchased, ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Random Forest Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'yellow', 'blue'))
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting classifier to the Training set
# install.packages("randomForest")
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3], y = training_set$Purchased, ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Random Forest Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'yellow', 'blue'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'Random Forest Classifier (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'yellow', 'blue'))
cm
setwd("~/MachineLearning/P4_Clustering/K_Means")
# Importing Dataset
dataset = read.csv('Mall_Customers.csv');
rm(list = ls())
dataset = read.csv('Mall_Customers.csv');
View(dataset)
X <- dataset[,[4, 5]]
X <- dataset[:,[4, 5]]
X <- dataset[:,(4, 5)]
X <- dataset[,(4, 5)]
dataset = read.csv('Mall_Customers.csv');
X <- dataset[4:5]
set.seed(6)
wcss <- vector()
for (i in 1:10) wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Clusters of clients'), xlab = "Number of clusters", yllab = 'WCSS')
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300, nstart = 10)
library(cluster)
library(cluster)
clusplot(X, kmeans$cluster,
lines = 0, shade = TRUE, color = TRUE, labels = 2,
plotchar = FALSE, span = TRUE, main = paste('Clusters o f clients'),
xlab = 'Annual Income', ylab = 'Spending Score')
# K-Means Clustering
# Importing Dataset
dataset = read.csv('Mall_Customers.csv');
X <- dataset[4:5]
# Using the Elbow Method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Clusters of clients'), xlab = "Number of clusters", ylab = 'WCSS')
# Applying k-means to the mall dataset
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300, nstart = 10)
# Visualising the clusters
library(cluster)
clusplot(X, kmeans$cluster,
lines = 0, shade = TRUE, color = TRUE, labels = 2,
plotchar = FALSE, span = TRUE, main = paste('Clusters of clients'),
xlab = 'Annual Income', ylab = 'Spending Score')
setwd("~/MachineLearning/P4_Clustering/Hierarchical_Clustering")
v')
dataset = read.csv('Mall_Customers.csv')
dataset = read.csv('Mall_Customers.csv')
X = dataset[4:5]
# Using the dendrgram to find the optimal number of clusters
dendrogram = hclust(dist(X, method = 'euclidean'), method = 'Ward.D')
plot(dendrogram, main = paste('Dendrogram'),
xlab = 'Customers', ylab = 'Euclidean Distance')
dendrogram = hclust(dist(X, method = 'euclidean'), method = 'Ward.D')
# Using the dendrgram to find the optimal number of clusters
dendrogram = hclust(dist(X, method = 'euclidean'), method = 'ward.D')
plot(dendrogram, main = paste('Dendrogram'),
xlab = 'Customers', ylab = 'Euclidean Distance')
# Fitting HC tothe mall dataset
hc = hclust(dist(X, method = 'euclidean'), method = 'ward.D')
y_hc = cutree(hc, k = 5)
y_hc
library(cluster)
clusplot(X, y_hc,
lines = 0, shade = TRUE, COLOR = TRUE,
labels = 2, plotchar = False, span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income', ylab = 'Spending Score')
clusplot(X, y_hc,
lines = 0, shade = TRUE, COLOR = TRUE,
labels = 2, plotchar = FALSE, span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income', ylab = 'Spending Score')
setwd("~/MachineLearning/P5_AssociationRuleLearning/Apriori")
# Hierarchy Clustering
# Importing the dataset
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
View(dataset)
View(dataset)
install.packages("arules")
library(arules)
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
itemFrequencyPlot(dataset, topN = 100)
itemFrequencyPlot(dataset, topN = 10)
itemFrequencyPlot(dataset, topN = 10)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
itemFrequencyPlot(dataset, topN = 100)
3*7
3*7/7500
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.8))
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.4))
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.4/2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.4/2))
inspect(sort(rules, by = 'lift')[1:10])
