ylab('Salary')
ggplot() +
geom_point(x = dataset$Level, y = dataset$Salary, color = 'red') +
geom_line(x = dataset$Level, y = predict(lin_reg, newdata = dataset$Level), color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression Results)') +
xlab('Position Level') +
ylab('Salary')
ggplot() +
geom_point(x = dataset$Level, y = dataset$Salary, color = 'red') +
geom_line(x = dataset$Level, y = predict(lin_reg, newdata = dataset$Level), color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression Results)') +
xlab('Position Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset$Level)), color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression Results)') +
xlab('Position Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset$Level)), color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression Results)') +
xlab('Position Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset$Level)), color = 'blue')
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Linear Regression to the dataset
lin_reg = lm(fomula = Salary ~ .,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level ^ 2
dataset$Level3 = dataset$Level ^ 3
poly_reg = lm(fumula = Salary ~ .,
data = dataset)
# Visualising the Linear Regression Results
# install.packages(ggplot2)
# library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset$Level)), color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression Results)') +
xlab('Position Level') +
ylab('Salary')
# Visualising the Polynomial Regression Results
predict(lin_reg, newdata = dataset$Level)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression Results)') +
xlab('Position Level') +
ylab('Salary')
rm(list = ls())
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Linear Regression to the dataset
lin_reg = lm(fomula = Salary ~ .,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level ^ 2
dataset$Level3 = dataset$Level ^ 3
poly_reg = lm(fumula = Salary ~ .,
data = dataset)
# Visualising the Linear Regression Results
# install.packages(ggplot2)
# library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression Results)') +
xlab('Position Level') +
ylab('Salary')
# Visualising the Polynomial Regression Results
View(dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset[,1:2])), color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression Results)') +
xlab('Position Level') +
ylab('Salary')
t=predict(lin_reg, newdata = dataset)
t
View(dataset)
t=predict(lin_reg, newdata = dataset[1:2])
t
t=predict(lin_reg, newdata = dataset[2:3])
t
t=predict(lin_reg, newdata = dataset[,1:2])
t
lin_reg = lm(fomula = Salary ~ .,
data = dataset)
rm(list = ls())
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
lin_reg = lm(fomula = Salary ~ .,
data = dataset)
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level ^ 2
dataset$Level3 = dataset$Level ^ 3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualising the Linear Regression Results
# install.packages(ggplot2)
# library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression Results)') +
xlab('Position Level') +
ylab('Salary')
# Visualising the Polynomial Regression Results
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression Results)') +
xlab('Position Level') +
ylab('Salary')
dataset$Level3 = dataset$Level ^ 4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualising the Polynomial Regression Results
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression Results)') +
xlab('Position Level') +
ylab('Salary')
dataset$Level2 = dataset$Level ^ 2
dataset$Level3 = dataset$Level ^ 3
dataset$Level4 = dataset$Level ^ 4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression Results)') +
xlab('Position Level') +
ylab('Salary')
predict(poly_reg, newdata=6.5)
predict(poly_reg, newdata = 6.5)
y_pred = predict(object = lin_reg, newdata = data.frame(Level = 6.5))
y_pred
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
y_pred
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3,]
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))), color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression Results)') +
xlab('Position Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg, newdata = data.frame(Level = x_grid))), color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression Results)') +
xlab('Position Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid$Level2 = x_grid$Level^2
x_grid$Level3 = x_grid$Level^3
x_grid$Level4 = x_grid$Level^4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg, newdata = data.frame(Level = x_grid))), color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression Results)') +
xlab('Position Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid$Level2 = x_grid$Level^2
x_grid$Level3 = x_grid$Level^3
x_grid$Level4 = x_grid$Level^4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(poly_reg, newdata = data.frame(Level = x_grid))), color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression Results)') +
xlab('Position Level') +
ylab('Salary')
x_grid$Level = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid$Level2 = x_grid$Level^2
x_grid$Level3 = x_grid$Level^3
x_grid$Level4 = x_grid$Level^4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(poly_reg, newdata = data.frame(Level = x_grid))), color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression Results)') +
xlab('Position Level') +
ylab('Salary')
x_grid
x_grid$Level = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid$Level2 = x_grid$Level^2
x_grid$Level3 = x_grid$Level^3
x_grid$Level4 = x_grid$Level^4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(poly_reg, newdata = x_grid)), color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression Results)') +
xlab('Position Level') +
ylab('Salary')
clear
rm(list = ls())
setwd("~/MachineLearning/P2_Regression/SVR")
install.packages('e1071')
library(e1071)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# dataset = scale(dataset)
# Fitting the SVR to the dataset
# install.packages('e1071')
library(e1071)
regressor = svm(formulr = Salary ~ .,
data = dataset,
type = 'eps-regression')
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# dataset = scale(dataset)
# Fitting the SVR to the dataset
# install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
y_pred = predict(regressor, data.frame(Level = 6.5))
y_pred
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
rm(list = ls())
setwd("~/MachineLearning/P2_Regression/Decision_Tree_Regression")
install.packages('rpart')
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset)
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
control = rpart.control(minsplit = 10))
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 10))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 9))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
clear
rm (list = ls())
setwd("~/MachineLearning/P2_Regression/Random_Forest_Regression")
install.packages("randomForest")
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
# install.packages("randomForest")
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset[2], ntree = 10)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
# install.packages("randomForest")
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 10)
dataset$Salary
dataset[2]
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 100)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 300)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 500)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
set.seed(1234)
regressor = randomForest(x = dataset[1], y = dataset$Salary, ntree = 500)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
